type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonRequestBuilder.java
  visible: false
  text: |-
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;

    class JsonBuilder {

        private final Gson gson = new Gson();
        private final JsonObject jsonObject = new JsonObject();

        private JsonBuilder() {
        }

        public static JsonBuilder newBuilder() {
            return new JsonBuilder();
        }

        public JsonBuilder addValue(String key, String value) {
            jsonObject.addProperty(key, value);
            return this;
        }

        public JsonBuilder addJsonObject(String key, JsonObject object) {
            jsonObject.add(key, object);
            return this;
        }

        public String getAsString() {
            return jsonObject.toString();
        }

        public JsonObject getAsJsonObject() {
            return jsonObject;
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    import java.io.File;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.lang.management.ManagementFactory;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";
        private static final String NO_SUCH_KEY_REASON = "No such key";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";

        private static final String fileName = "db.json";
        private static final String clientDataPath = System.getProperty("user.dir") + File.separator +
            "src" + File.separator +
            "client" + File.separator +
            "data";
        private static final String dbFilePath = System.getProperty("user.dir") + File.separator +
            "src" + File.separator +
            "server" + File.separator +
            "data" + File.separator + fileName;

        private static int threadsCount;

        @DynamicTestingMethod
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            if (!Files.exists(Path.of(dbFilePath))) {
                return CheckResult.wrong("Can't find /server/data/db.json file.");
            }

            try (FileWriter fileWriter = new FileWriter(new File(dbFilePath))) {
                fileWriter.write("{}");
            } catch (IOException e) {
                return CheckResult.wrong("Close the db.json file before starting the tests.");
            }

            if (!Files.exists(Paths.get(clientDataPath))) {
                return CheckResult.correct();
            }

            String setRequest = JsonBuilder.newBuilder()
                .addValue("type", "set")
                .addValue("key", "name")
                .addValue("value", "Kate")
                .getAsJsonObject().toString();

            String getRequest = JsonBuilder.newBuilder()
                .addValue("type", "get")
                .addValue("key", "name")
                .getAsJsonObject().toString();

            String deleteRequest = JsonBuilder.newBuilder()
                .addValue("type", "delete")
                .addValue("key", "name")
                .getAsJsonObject().toString();

            try {
                Files.write(Paths.get(clientDataPath + File.separator + "testSet.json"), setRequest.getBytes());
                Files.write(Paths.get(clientDataPath + File.separator + "testGet.json"), getRequest.getBytes());
                Files.write(Paths.get(clientDataPath + File.separator + "testDelete.json"), deleteRequest.getBytes());
            } catch (IOException e) {
                throw new WrongAnswer("Can't create test files in /client/data/ folder.");
            }


            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult checkDataFolder() {

            if (!Files.exists(Paths.get(clientDataPath))) {
                return CheckResult.wrong("Can't find /client/data/ folder.");
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult testInputs() throws InterruptedException {

            threadsCount = getThreadCount();
            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            String requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            String responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "Hello world!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "HelloWorld!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "HelloWorld!")
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");
            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "text", "-v", "Some text here");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "text")
                    .value("value", "Some text here")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "text");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "text")
                );
            expectedValue = "Some text here";
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", expectedValue)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "100");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "100")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-t", "delete", "-k", "That key doesn't exist");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "That key doesn't exist")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-in", "testSet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "name")
                    .value("value", "Kate")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-in", "testGet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "Kate")
                );

            client = getClient();
            output = client.start("-in", "testDelete.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );

            client = getClient();
            output = client.start("-in", "testGet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );
            checkIfThreadWasCreated();

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }

        private static TestedProgram getClient() {
            return new TestedProgram(client.Main.class);
        }

        private static TestedProgram getServer() {
            return new TestedProgram(server.Main.class);
        }

        private static int getThreadCount() {
            return (int) ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
        }

        private static void checkIfThreadWasCreated() {
            int total = getThreadCount();

             /*18 threads: 1 server thread and 17 client threads created during the test.
             If the server doesn't handle clients in a new thread then the difference between number of threads
             before and after the test should be equal 18 */
            if (total - threadsCount == 18) {
                throw new WrongAnswer("Looks like you don't process client connection in another thread.\n" +
                    "Every client request should be parsed and handled in a separate thread!");
            }
        }

        @AfterClass
        public static void deleteFiles() {
            try {
                Files.delete(Paths.get(clientDataPath + "testSet.json"));
                Files.delete(Paths.get(clientDataPath + "testGet.json"));
                Files.delete(Paths.get(clientDataPath + "testDelete.json"));
            } catch (IOException ignored) {
            }
        }
    }
  learner_created: false
- name: test/JsonFinder.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JsonFinder {

        private static final Pattern pattern = Pattern.compile("\\{.+}");

        public static String findRequestJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("type")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'type' key");
        }

        public static String findResponseJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("response")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'response' key");
        }
    }
  learner_created: false
- name: src/server/input/SocketInputProviderImpl.java
  visible: true
  text: |
    package server.input;

    import com.google.gson.Gson;
    import io.vavr.control.Try;
    import server.model.Input;

    import java.io.DataInputStream;

    public class SocketInputProviderImpl implements InputProvider {
        private final DataInputStream input;
        private final Gson gson = new Gson();

        public SocketInputProviderImpl(DataInputStream input) {
            this.input = input;
        }

        @Override
        public Input getInputCommand() {
            return Try.of(this.input::readUTF)
                    .map(s -> gson.fromJson(s, JsonInput.class))
                    .flatMap(jsonInput -> Try.of(() -> Input.builder()
                            .command(CommandEnum.valueOf(jsonInput.getType().toUpperCase()))
                            .key(jsonInput.getKey())
                            .value(jsonInput.getValue())
                            .build())
                    ).getOrElse(Input.empty());
        }
    }
  learner_created: true
- name: src/server/output/Console.java
  visible: true
  text: |
    package server.output;

    import server.model.Output;

    public class Console implements OutputProvider {
        public void send(Output msg) {
            System.out.println(msg);
        }
    }
  learner_created: true
- name: src/server/Database.java
  visible: true
  text: |
    package server;

    import server.commands.Command;
    import server.commands.UnknownCommand;
    import server.commands.delete.DeleteCommand;
    import server.commands.exit.ExitCommand;
    import server.commands.get.GetCommand;
    import server.commands.set.SetCommand;
    import server.file.DataDriveFacade;
    import server.input.InputProvider;
    import server.input.SocketInputProviderImpl;
    import server.model.Input;
    import server.model.Output;
    import server.output.OutputProvider;
    import server.output.SocketOutputProvider;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.Socket;

    import static io.vavr.API.*;
    import static server.input.CommandEnum.*;

    public class Database {
        private boolean isRunning = true;
        private Socket socket;
        private Server server;
        private InputProvider inputProvider;
        private OutputProvider outputProvider;
        private DataDriveFacade dataHardDrive;

        public Database(Socket socket, DataDriveFacade dataHardDrive, Server server) throws IOException {
            this.dataHardDrive = dataHardDrive;
            this.socket = socket;
            this.server = server;
            DataInputStream input = new DataInputStream(socket.getInputStream());
            DataOutputStream output = new DataOutputStream(socket.getOutputStream());
            inputProvider = new SocketInputProviderImpl(input);
            outputProvider = new SocketOutputProvider(output);
        }

        public void handleRequest() throws IOException {
            System.out.println("Server started!");
            Input input = inputProvider.getInputCommand();
            Command command = Match(input.getCommand()).of(
                    Case($(GET), new GetCommand(input, dataHardDrive)),
                    Case($(SET), new SetCommand(input, dataHardDrive)),
                    Case($(DELETE), new DeleteCommand(input, dataHardDrive)),
                    Case($(EXIT), new ExitCommand(server)),
                    Case($(UNKNOWN), new UnknownCommand(input))
            );
            Output output = command.execute();
            outputProvider.send(output);
            closeConnection();
        }

        public void closeConnection() {
            try {
                socket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/server/commands/Command.java
  visible: true
  text: |
    package server.commands;

    import server.file.DataDriveFacade;
    import server.model.Input;
    import server.model.Output;
    import server.output.OutputProvider;

    public abstract class Command {
        protected Input input;
        protected DataDriveFacade dataSave;

        protected Command(Input input, DataDriveFacade dataSave) {
            this.input = input;
            this.dataSave = dataSave;
        }

        public abstract Output execute();

    }
  learner_created: true
- name: src/server/model/Input.java
  visible: true
  text: |
    package server.model;

    import lombok.*;
    import server.input.CommandEnum;

    @Getter
    @NoArgsConstructor
    @AllArgsConstructor(access = AccessLevel.PRIVATE)
    @Builder
    public class Input {
        private CommandEnum command;
        private String key;
        private String value;

        public static Input empty() {
            return new Input(CommandEnum.UNKNOWN, "key", "Not given");
        }
    }
  learner_created: true
- name: src/server/Server.java
  visible: true
  text: |
    package server;

    import server.file.DataDriveMemoryImpl;

    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.ServerSocket;
    import java.net.Socket;

    public class Server {
        private static final String ADDRESS = "127.0.0.1";
        private static final int PORT = 23456;
        private boolean isRunning = true;
        private DataDriveMemoryImpl dataDriveMemory = new DataDriveMemoryImpl();


        public void start() throws IOException {
            ServerSocket server = new ServerSocket(PORT, 50, InetAddress.getByName(ADDRESS));
            while (isRunning) {
                Socket socket = server.accept();
                new Database(socket, dataDriveMemory, this).handleRequest();
            }
            server.close();
        }

        public void setRunning(boolean running) {
            isRunning = running;
        }
    }
  learner_created: true
- name: src/server/commands/UnknownCommand.java
  visible: true
  text: |
    package server.commands;

    import server.model.Input;
    import server.model.Output;
    import server.output.OutputProvider;

    public class UnknownCommand extends Command {

        public UnknownCommand(Input input) {
            super(input, null);
        }

        @Override
        public Output execute() {
            return Output.failureWithReason("Unknown command");
        }
    }
  learner_created: true
- name: src/server/output/SocketOutputProvider.java
  visible: true
  text: |
    package server.output;

    import com.google.gson.Gson;
    import server.model.Output;

    import java.io.DataOutputStream;
    import java.io.IOException;

    public class SocketOutputProvider implements OutputProvider {
        private DataOutputStream outputStream;
        private Gson jsonParser = new Gson();

        public SocketOutputProvider(DataOutputStream output) {
            this.outputStream = output;
        }

        @Override
        public void send(Output output) {
            String json = jsonParser.toJson(output);
            try {
                outputStream.writeUTF(json);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/server/output/OutputProvider.java
  visible: true
  text: |
    package server.output;

    import server.model.Output;

    public interface OutputProvider {
        void send(Output output);
    }
  learner_created: true
- name: src/server/input/JsonInput.java
  visible: true
  text: |
    package server.input;

    import com.beust.jcommander.Parameter;
    import lombok.Getter;

    @Getter
    public class JsonInput {
        private String type;
        private String key;
        private String value;
    }
  learner_created: true
- name: src/server/model/Output.java
  visible: true
  text: |
    package server.model;

    import lombok.AllArgsConstructor;
    import lombok.Getter;

    @Getter
    @AllArgsConstructor
    public class Output {
        private String response;
        private String value;
        private String reason;

        public static Output failureWithReason(String reason) {
            return new Output("ERROR", null, reason);
        }

        public static Output success() {
            return new Output("OK", null, null);
        }

        public static Output successWithValue(String value) {
            return new Output("OK", value, null);
        }
    }
  learner_created: true
- name: src/server/input/CommandEnum.java
  visible: true
  text: |
    package server.input;

    public enum CommandEnum {
        GET,
        SET,
        DELETE,
        EXIT,
        UNKNOWN,
        ERROR
    }
  learner_created: true
- name: src/server/commands/set/SetCommand.java
  visible: true
  text: |
    package server.commands.set;

    import server.commands.Command;
    import server.file.DataDriveFacade;
    import server.model.Input;
    import server.model.Output;

    public class SetCommand extends Command {

        public SetCommand(Input input, DataDriveFacade dataSave) {
            super(input, dataSave);
        }

        @Override
        public Output execute() {
            dataSave.write(getMsgInput(), getKey());
            return Output.success();
        }

        private String getMsgInput() {
            return input.getValue();
        }

        private String getKey() {
            return input.getKey();
        }

    }
  learner_created: true
- name: src/server/commands/delete/DeleteCommand.java
  visible: true
  text: |
    package server.commands.delete;

    import server.commands.Command;
    import server.file.DataDriveFacade;
    import server.model.Input;
    import server.model.Output;

    public class DeleteCommand extends Command {
        public DeleteCommand(Input input, DataDriveFacade dataSave) {
            super(input, dataSave);
        }

        @Override
        public Output execute() {
            if (dataSave.clear(input.getKey())) {
                return Output.failureWithReason("No such key");
            }
            return Output.success();
        }
    }
  learner_created: true
- name: src/server/file/DataDriveMemoryImpl.java
  visible: true
  text: |
    package server.file;

    import java.util.HashMap;
    import java.util.Map;
    import java.util.Objects;

    public class DataDriveMemoryImpl implements DataDriveFacade {
        private Map<String, String> data = new HashMap<>();

        @Override
        public boolean write(String message, String key) {
            data.put(key, message);
            return true;
        }

        @Override
        public String read(String key) {
            return data.get(key);
        }

        @Override
        public boolean clear(String key) {
            return Objects.isNull(data.remove(key));
        }
    }
  learner_created: true
- name: src/server/commands/exit/ExitCommand.java
  visible: true
  text: |
    package server.commands.exit;

    import server.Database;
    import server.Server;
    import server.commands.Command;
    import server.model.Output;

    public class ExitCommand extends Command {
        private Server server;

        public ExitCommand(Server server) {
            super(null, null);
            this.server = server;
        }

        @Override
        public Output execute() {
            server.setRunning(false);
            return Output.success();
        }
    }
  learner_created: true
- name: src/server/commands/get/GetCommand.java
  visible: true
  text: |
    package server.commands.get;

    import server.commands.Command;
    import server.file.DataDriveFacade;
    import server.model.Input;
    import server.model.Output;

    import java.util.Objects;

    public class GetCommand extends Command {

        public GetCommand(Input input, DataDriveFacade dataHardDrive) {
            super(input, dataHardDrive);
        }

        @Override
        public Output execute() {
            String message = dataSave.read(input.getKey());
            if (Objects.isNull(message)) {
                return Output.failureWithReason("No such key");
            }
            return Output.successWithValue(message);
        }
    }
  learner_created: true
- name: src/server/input/InputProvider.java
  visible: true
  text: |
    package server.input;

    import server.model.Input;

    public interface InputProvider {
        Input getInputCommand();
    }
  learner_created: true
- name: src/server/file/DataDriveFileImpl.java
  visible: true
  learner_created: true
- name: src/server/file/DataDrive.java
  visible: true
  text: |
    package server.file;

    public interface DataDriveFacade {
        boolean write(String message, String key);

        String read(String key);

        boolean clear(String key);
    }
  learner_created: true
- name: src/client/input/FileConverter.java
  visible: true
  learner_created: true
- name: src/client/input/Input.java
  visible: true
  learner_created: true
- name: src/client/data/testGet.json
  visible: true
  learner_created: true
- name: src/client/data/testSet.json
  visible: true
  learner_created: true
- name: src/client/data/testDelete.json
  visible: true
  learner_created: true
- name: src/server/data/db.json
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/65/stages/352/implement#comment
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/65/stages/352/implement">JetBrains
    Academy</a>
  time: Fri, 13 Nov 2020 16:14:20 UTC
record: -1
